<?xml version="1.0" encoding="UTF-8"?>
<!-- 生产上的异步配置，在多线程环境下，可以带来更好的性能提升 -->
<!-- 1.需求disruptor3.0.0以上的jar。2.set system property Log4jContextSelector to org.apache.logging.log4j.core.async.AsyncLoggerContextSelector -->
<!-- 使用location的时候需要AsyncLogger来配置 -->
<configuration name="asynchronous-cfg" status="off">

	<!-- 常量引用 -->
	<properties>
		<property name="LOG_HOME">log</property>
		<property name="FORMAT">%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} -%msg%n</property>
	</properties>

	<appenders>
		<console name="console" target="system_out">
			<patternLayout pattern="${FORMAT}" />
		</console>
		<!-- 和rollingFile类似,但是区别最大的是性能,能带来显著的性能提升,通过配置可以使用异步logger -->
		<RollingRandomAccessFile name="rollingRandomFile" fileName="${LOG_HOME}/currentAsync.log" filePattern="${LOG_HOME}/pastAsync-%d{MM-dd-yyyy}-%i.log" append="false">
			<patternLayout pattern="${FORMAT}" />
			<policies>
				<!-- 根据实际情况进行配置 -->
				<sizeBasedTriggeringPolicy size="20MB" />
				<!-- 单位：小时，一天换一次日志 -->
				<TimeBasedTriggeringPolicy interval="24" modulate="true" />
			</policies>
		</RollingRandomAccessFile>
	</appenders>
	<loggers>
	
		<!-- 使用location时的配置 -->
<!-- 		<AsyncLogger name="x.x.x" level="info" includeLocation="true">
			<AppenderRef ref="rollingRandomFile" />
		</AsyncLogger> -->
	
		<root level="trace">
			<appender-ref ref="console" />
			<appender-ref ref="rollingRandomFile" />
		</root>
	</loggers>
</configuration> 