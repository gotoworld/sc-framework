package ${scfg._biz_pkg};

import ${scfg._api_pkg}.I${tcfg.tableNameFormat!}Service;
import ${scfg._dao_pkg}.I${tcfg.tableNameFormat!}Dao;
import ${scfg._domain_pkg}.${tcfg.tableNameFormat!};
import com.wu1g.framework.annotation.RfAccount2Bean;
import com.wu1g.framework.service.BaseService;
import com.wu1g.framework.util.CommonConstant;
import com.github.pagehelper.PageHelper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@Service
@Slf4j
public class ${tcfg.tableNameFormat!}Service extends BaseService implements I${tcfg.tableNameFormat!}Service {
    @Autowired
    private I${tcfg.tableNameFormat!}Dao ${tableNameL}Dao;

    <%if ("1"==scfg._insert||"1"==scfg._update) {%>
    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = CommonConstant.DB_DEFAULT_TIMEOUT, rollbackFor = {Exception.class, RuntimeException.class})
    public String saveOrUpdateData(${tcfg.tableNameFormat!} dto) throws Exception {
        String msg = "seccuss";
        if (dto != null) {
            try {
                //判断数据是否存在
                if (dto.getId() != null && ${tableNameL}Dao.isDataYN(dto) != 0) {
                    //数据存在
                    <%if ("1"==scfg._update){%>${tableNameL}Dao.update(dto);<%}%>
                } else {
                    //新增
                     <%if ("1"==scfg._insert){%>${tableNameL}Dao.insert(dto);<%}%>
                }
            } catch (Exception e) {
                log.error("信息保存失败!", e);
                throw new Exception("信息保存失败!");
            }
        }
        return msg;
    }
    <%}%>

    <%if ("1"==scfg._del) {%>
    @Override
    public String deleteData(${tcfg.tableNameFormat!} dto) throws Exception {
        String msg = "seccuss";
        if (dto != null) {
            try {
                if(${tableNameL}Dao.deleteByPrimaryKey(dto)==0){
					throw new RuntimeException("数据不存在!");
                }
            } catch (Exception e) {
                log.error("物理删除失败!", e);
                throw new Exception(e.getMessage());
            }
        }
        return msg;
    }
    <%}%>

    <%if ("1"==scfg._delLogic||null!=scfg._col_del) {%>
    @Override
    @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = CommonConstant.DB_DEFAULT_TIMEOUT, rollbackFor = {Exception.class, RuntimeException.class})
    public String deleteDataById(${tcfg.tableNameFormat!} dto) throws Exception {
        String msg = "seccuss";
        if (dto != null) {
            try {
                if(${tableNameL}Dao.deleteById(dto)==0){
					throw new RuntimeException("数据不存在!");
                }
            } catch (Exception e) {
                log.error("逻辑删除失败!", e);
                throw new Exception(e.getMessage());
            }
        }
        return msg;
    }
    <%}%>

    <%if ("1"==scfg._page) {%>
    @Override
    public List<${tcfg.tableNameFormat!}> findDataIsPage(${tcfg.tableNameFormat!} dto) throws Exception {
        List<${tcfg.tableNameFormat!}> dtos = null;
        try {
            PageHelper.startPage(PN(dto.getPageNum()), PS(dto.getPageSize()));
            dtos = (List<${tcfg.tableNameFormat!}>) ${tableNameL}Dao.findDataIsPage(dto);
        } catch (Exception e) {
            log.error("信息查询失败!", e);
            throw new Exception("信息查询失败!");
        }
        return dtos;
    }
    <%}%>

    <%if ("1"==scfg._list) {%>
    @Override
    public List<${tcfg.tableNameFormat!}> findDataIsList(${tcfg.tableNameFormat!} dto) throws Exception {
        List<${tcfg.tableNameFormat!}> dtos = null;
        try {
            dtos = (List<${tcfg.tableNameFormat!}>) ${tableNameL}Dao.findDataIsList(dto);
        } catch (Exception e) {
            log.error("信息查询失败!", e);
            throw new Exception("信息查询失败!");
        }
        return dtos;
    }
     <%}%>

    <%if ("1"==scfg._detail) {%>
    @Override
    @RfAccount2Bean
    public ${tcfg.tableNameFormat!} findDataById(${tcfg.tableNameFormat!} dto) throws Exception {
        ${tcfg.tableNameFormat!} dto1 = null;
        try {
            dto1 = (${tcfg.tableNameFormat!}) ${tableNameL}Dao.selectByPrimaryKey(dto);
        } catch (Exception e) {
            log.error("信息查询失败!", e);
            throw new Exception("信息查询失败!");
        }
        return dto1;
    }
    <%}%>

     <%if ("1"==scfg._recovery||null!=scfg._col_del) {%>
    @Override
    public String recoveryDataById(${tcfg.tableNameFormat!} dto) throws Exception {
        String msg = "seccuss";
        if (dto != null) {
            try {
                if(${tableNameL}Dao.recoveryDataById(dto)==0){
					throw new RuntimeException("数据不存在!");
                }
            } catch (Exception e) {
                log.error("数据恢复失败!", e);
                throw new Exception(e.getMessage());
            }
        }
        return msg;
    }
    <%}%>
}