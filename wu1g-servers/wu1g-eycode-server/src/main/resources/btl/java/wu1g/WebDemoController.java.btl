package ${scfg._web_pkg};

import com.github.pagehelper.PageInfo;
import ${scfg._api_pkg}.I${tcfg.tableNameFormat!}Service;
import com.wu1g.framework.Response;
import com.wu1g.framework.annotation.ALogOperation;
import com.wu1g.framework.annotation.RfAccount2Bean;
import com.wu1g.framework.util.CommonConstant;
import ${scfg._domain_pkg}.${tcfg.tableNameFormat!};
import com.wu1g.web.controller.BaseController;
import lombok.extern.slf4j.Slf4j;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.dtos.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.Path${tcfg.tableNameFormat!};
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributesModelMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.List;

/**
 * <p>${tcfg.tableComment}。
 */
@Controller
@Slf4j
public class ${tcfg.tableNameFormat!}Controller extends BaseController {
	@Autowired
	protected I${tcfg.tableNameFormat!}Service ${tableNameL}Service;
	
	private static final String acPrefix="${scfg._web_http}/";
	private static final String init = "${strUtil.getDir(scfg._view_pkg)}/${tcfg.tableName}";
	private static final String edit = "${strUtil.getDir(scfg._view_pkg)}/${tcfg.tableName}_edit";
	private static final String list = "${strUtil.getDir(scfg._view_pkg)}/${tcfg.tableName}_list";
	private static final String success = "redirect:"+acPrefix+"init";
	
	/**
	 * <p> 初始化处理。
	 */
	@RequiresPermissions("${tableNameL}:menu")
	@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=acPrefix+"init")
	public String init() {
		log.info("${tcfg.tableNameFormat!}Controller init.........");
		return init;
	}
	 <%if ("1"==scfg._page) {%>
	/**
	 * <p> 信息分页 (未删除)。
	 */
	@RequiresPermissions("${tableNameL}:menu")
	@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=acPrefix+"page")
	public String page(HttpServletRequest request, HttpServletResponse response,${tcfg.tableNameFormat!} dto) {
		log.info("${tcfg.tableNameFormat!}Controller page.........");
		if(dto==null){
			dto = new ${tcfg.tableNameFormat!}();
		}
		PageInfo<?> page=new PageInfo<>(${tableNameL}Service.findDataIsPage(dto));
		request.setAttribute( "dtos", page.getList() );
		//分页对象
		request.setAttribute(CommonConstant.PAGEROW_OBJECT_KEY,page);
		return list;
	}
	<%}%>

    <%if ("1"==scfg._insert||"1"==scfg._update) {%>
	/**
	 * <p> 编辑。
	 */
	@RequiresPermissions("${tableNameL}:edit")
	@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=acPrefix+"edit/{id}")
	public String edit(${tcfg.tableNameFormat!} dto,@Path${tcfg.tableNameFormat!}("id") Long id) {
		log.info("${tcfg.tableNameFormat!}Controller edit.........");
		int pageNum=getPageSize(dto);
		if(0!=id){
			${tcfg.tableNameFormat!} dto1=new ${tcfg.tableNameFormat!}();
			<%for(t in pks){%>
            dto.set${strUtil.toUpperCaseFirstOne(t.columnNameFormat)}(${t.columnNameFormat});
            <%}%>
			dto=${tableNameL}Service.findDataById(dto1);
		}
		if(dto==null||0==id){
			dto=new ${tcfg.tableNameFormat!}();
            dto.setNewFlag(1);
		}
		dto.setPageNum( pageNum );
		request.setAttribute("dto",dto);
		return edit;
	}
	<%}%>

	/**
	 * <li>删除。
	 */
	@RequiresPermissions("${tableNameL}:del")
	@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=acPrefix+"del/{id}")
	@ALogOperation(type="删除",desc="${tcfg.tableComment}")
	public String del(@Path${tcfg.tableNameFormat!}("id") Long id, RedirectAttributesModelMap modelMap) {
		log.info("${tcfg.tableNameFormat!}Controller del.........");
		Response result = new Response();
		try {
			${tcfg.tableNameFormat!} dto=new ${tcfg.tableNameFormat!}();
			<%for(t in pks){%>
            dto.set${strUtil.toUpperCaseFirstOne(t.columnNameFormat)}(${t.columnNameFormat});
            <%}%>
            <%if ("1"==scfg._delLogic||null!=scfg._col_del) {%>
            result.message = ${tableNameL}Service.deleteDataById(dto);
            <%}else{%>
            result.message = ${tableNameL}Service.deleteData(dto);
            <%}%>
		} catch (Exception e) {
			result=Response.error(e.getMessage());
		}
		modelMap.addFlashAttribute("msg", result);
		return success;
	}

	<%if ("1"==scfg._insert||"1"==scfg._update) {%>
	/**
	 * <p> 信息保存
	 */
	@RequiresPermissions(value={"${tableNameL}:add","${tableNameL}:edit"},logical=Logical.OR)
	@RequestMapping(method={RequestMethod.GET,RequestMethod.POST},value=acPrefix+"save")
	@RfAccount2Bean
	@ALogOperation(type="修改",desc="${tcfg.tableComment}")
	public String save(@Validated ${tcfg.tableNameFormat!} dto,BindingResult bindingResult,RedirectAttributesModelMap modelMap) {
		log.info("${tcfg.tableNameFormat!}Controller save.........");
		Response result = new Response();
		if(dto!=null){
			try {
				if ("1".equals(request.getSession().getAttribute(acPrefix + "save." + dto.getToken()))) {
					throw new RuntimeException("请不要重复提交!");
				}
				if (bindingResult.hasErrors()) {
					String errorMsg = "";
					List<ObjectError> errorList = bindingResult.getAllErrors();
					for (ObjectError error : errorList) {
						errorMsg += (error.getDefaultMessage()) + ";";
					}
					result = Response.error(errorMsg);
				}else{
					result.message=${tableNameL}Service.saveOrUpdateData(dto);
					result.data = dto.getId();
					request.getSession().setAttribute(acPrefix + "save." + dto.getToken(), "1");
				}
			} catch (Exception e) {
				result = Response.error(e.getMessage());
			}
		} else {
			result = Response.error("信息保存失败!");
		}
		modelMap.addFlashAttribute("msg", result);
		return success;
	}
	<%}%>
}