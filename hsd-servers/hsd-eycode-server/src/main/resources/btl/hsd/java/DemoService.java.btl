package ${scfg._biz_pkg};

import ${scfg._api_pkg}.I${tcfg.tableNameFormat!}Service;
import ${scfg._dao_pkg}.I${tcfg.tableNameFormat!}${scfg._dao_suffix!};
import ${scfg._domain_pkg}.${tcfg.tableNameFormat!};
import ${scfg._dto_pkg}.${tcfg.tableNameFormat!}Dto;

import com.hsd.framework.annotation.RfAccount2Bean;
import lombok.extern.slf4j.Slf4j;
import com.hsd.framework.Response;
import com.hsd.framework.SysErrorCode;
import com.hsd.framework.annotation.FeignService;
import com.hsd.framework.service.BaseService;
import com.hsd.framework.util.CommonConstant;
import com.hsd.framework.util.IdUtil;
import com.hsd.framework.util.ValidatorUtil;
import com.hsd.framework.NodeTree;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import com.github.pagehelper.PageHelper;

import java.util.List;
import java.util.Map;

@FeignService
@Slf4j
public class ${tcfg.tableNameFormat!}Service extends BaseService implements I${tcfg.tableNameFormat!}Service {
    @Autowired
    private I${tcfg.tableNameFormat!}${scfg._dao_suffix!} ${tableNameL}${scfg._dao_suffix!};

    @[ if ("1"==scfg._insert||"1"==scfg._update) { /]
        @Override
        @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = PortalConstant.DB_DEFAULT_TIMEOUT, rollbackFor = {Exception.class, RuntimeException.class})
        public Response saveOrUpdateData(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
            Response result = new Response(0,"seccuss");
                try {
                    if (dto == null)throw new RuntimeException("参数异常!");
                    ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
                    //判断数据是否存在
                    if (${tableNameL}${scfg._dao_suffix!}.isDataYN(entity) != 0) {
                        //数据存在
                        @[ if ("1"==scfg._update){ /]${tableNameL}${scfg._dao_suffix!}.update(entity);@[ } /]
                    } else {
                        //新增
                         @[ if ("1"==scfg._insert){ /]${tableNameL}${scfg._dao_suffix!}.insert(entity);@[ } /]
                         result.data=entity.getId();
                    }
                } catch (Exception e) {
                    log.error("信息保存异常!", e);
                    throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
                }
            }
            return result;
        }
        @[ } /]

        @[ if ("1"==scfg._del) { /]
        @Override
        public String deleteData(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
            String result = "seccuss";
            try {
                if (dto == null)throw new RuntimeException("参数异常!");
                ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
                if(${tableNameL}${scfg._dao_suffix!}.deleteByPrimaryKey(entity)==0){
                    throw new RuntimeException("数据不存在!");
                }
            } catch (Exception e) {
                log.error("物理删除异常!", e);
                throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
            }
            return result;
        }
        @[ } /]

        @[ if ("1"==scfg._delLogic && null!=scfg._col_del) { /]
        @Override
        @Transactional(propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT, timeout = PortalConstant.DB_DEFAULT_TIMEOUT, rollbackFor = {Exception.class, RuntimeException.class})
        public String deleteDataById(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
            String result = "seccuss";
            try {
                if (dto == null)throw new RuntimeException("参数异常!");
                ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
                if(${tableNameL}${scfg._dao_suffix!}.deleteById(entity)==0){
                    throw new RuntimeException("数据不存在!");
                }
            } catch (Exception e) {
                log.error("逻辑删除异常!", e);
                throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
            }
            return result;
        }
        @[ } /]

        @[ if ("1"==scfg._page) { /]
        @Override
        public PageInfo findDataIsPage(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
           PageInfo pageInfo=null;
           try {
               if (dto == null)throw new RuntimeException("参数异常!");
               ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
               PageHelper.startPage(PN(dto.getPageIndex()), PS(dto.getPageSize()));
               List list = ${tableNameL}${scfg._dao_suffix!}.findDataIsPage(entity);
               pageInfo=new PageInfo(list);
               pageInfo.setList(copyTo(pageInfo.getList(), ${tcfg.tableNameFormat!}Dto.class));
           } catch (Exception e) {
               log.error("信息[分页]查询异常!", e);
               throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
           }
           return pageInfo;
        }
        @[ } /]

        @[ if ("1"==scfg._list||"1"==scfg._tree) { /]
        @Override
        public List<${tcfg.tableNameFormat!}Dto> findDataIsList(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
            List<${tcfg.tableNameFormat!}Dto>  results = null;
            try {
                ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
                 results = copyTo(${tableNameL}${scfg._dao_suffix!}.findDataIsList(entity), ${tcfg.tableNameFormat!}Dto.class);
            } catch (Exception e) {
                log.error("信息[列表]查询异常!", e);
                throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
            }
            return  results;
        }
         @[ } /]

        @[ if ("1"==scfg._detail) { /]
        @Override
        public ${tcfg.tableNameFormat!}Dto findDataById(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
            ${tcfg.tableNameFormat!}Dto result = null;
            try {
                ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
                result = copyTo(${tableNameL}${scfg._dao_suffix!}.selectByPrimaryKey(entity),${tcfg.tableNameFormat!}Dto.class);
            } catch (Exception e) {
                log.error("信息[详情]查询异常!", e);
                throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
            }
            return result;
        }
        @[ } /]

         @[ if ("1"==scfg._recovery && null!=scfg._col_del) { /]
        @Override
        public String recoveryDataById(@RequestBody ${tcfg.tableNameFormat!}Dto dto) throws Exception {
            String result = "seccuss";
            try {
                if (dto == null)throw new RuntimeException("参数异常!");
                ${tcfg.tableNameFormat!} entity = copyTo(dto, ${tcfg.tableNameFormat!}.class);
                if(${tableNameL}${scfg._dao_suffix!}.recoveryDataById(entity)==0){
                    throw new RuntimeException("数据不存在!");
                }
            } catch (Exception e) {
                log.error("数据恢复异常!", e);
                throw new ServiceException(SysErrorCode.defaultError,e.getMessage());
            }
            return result;
        }
        @[ } /]

        @[ if ("1"==scfg._tree) { /]
        public List<${tcfg.tableNameFormat!}Dto> findDataIsTree(@RequestBody(required = false) ${tcfg.tableNameFormat!}Dto dto) {
            List<${tcfg.tableNameFormat!}Dto> results = findDataIsList(dto);
            if (results == null) {
                return null;
            }
            NodeTree<${tcfg.tableNameFormat!}Dto> tree = new NodeTree(results, "id", "parentId", "nodes");
            return tree.buildTree();
        }
        @[ } /]
}