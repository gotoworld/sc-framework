windows系统环境变量
DOCKER_HOST=tcp://192.168.108.150:2375

#远程启动某台机器上的镜像 -H 192.168.108.150:2375
docker run -dit -v /logs:/logs --net="host" -p 6060:6060 hsd/hsd-account-server:1.0

docker run -dit -v /logs/hsd-account-staff-server:/logs --net="host" --name="hsd-account-staff-server" -p 6060:6060 192.168.108.150/hsd/hsd-account-staff-server:1.0
docker run -dit -v /logs/hsd-account-staff-web-boss:/logs --net="host" --name="hsd-account-staff-web-boss" -p 6061:6061 192.168.108.150/hsd/hsd-account-staff-web-boss:1.0

docker run -dit -v /logs/hsd-account-actor-server:/logs --net="host" --name="hsd-account-actor-server" -p 6064:6064 192.168.108.150/hsd/hsd-account-actor-server:1.0
docker run -dit -v /logs/hsd-account-actor-web-boss:/logs --net="host" --name="" -p 6065:6065 192.168.108.150/hsd/hsd-account-actor-web-boss:1.0
docker run -dit -v /logs/hsd-account-actor-web-portal:/logs --net="host" --name="hsd-account-actor-web-portal" -p 6066:6066 192.168.108.150/hsd/hsd-account-actor-web-portal:1.0

docker run -dit -v /logs/hsd-util-sms-server:/logs --net="host" --name="hsd-util-sms-server" -p 6080:6080 192.168.108.150/hsd/hsd-util-sms-server:1.0
docker run -dit -v /logs/hsd-util-sms-web-boss:/logs --net="host" --name="hsd-util-sms-web-boss" -p 6081:6081 192.168.108.150/hsd/hsd-util-sms-web-boss:1.0
docker run -dit -v /logs/hsd-util-sms-web-portal:/logs --net="host" --name="hsd-util-sms-web-portal" -p 6082:6082 192.168.108.150/hsd/hsd-util-sms-web-portal:1.0

docker run ：创建一个新的容器并运行一个命令
语法
docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
OPTIONS说明：
-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；
-d: 后台运行容器，并返回容器ID；
-i: 以交互模式运行容器，通常与 -t 同时使用；
-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；
--name="nginx-lb": 为容器指定一个名称；
--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；
--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；
-h "mars": 指定容器的hostname；
-e username="ritchie": 设置环境变量；
--env-file=[]: 从指定文件读入环境变量；
--cpuset="0-2" or --cpuset="0,1,2": 绑定容器到指定CPU运行；
-m :设置容器使用内存最大值；
--net="bridge": 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；
--link=[]: 添加链接到另一个容器；
--expose=[]: 开放一个端口或一组端口；

常用命令

总结一下常用命令:

其中<>阔起来的参数为必选，[]阔起来为可选

docker version 查看docker的版本号，包括客户端、服务端、依赖的Go等
docker info 查看系统(docker)层面信息，包括管理的images, containers数等
docker search <image> 在docker index中搜索image
docker pull <image> 从docker registry server 中下拉image
docker push <image|repository> 推送一个image或repository到registry
docker push <image|repository>:TAG 同上，指定tag
docker inspect <image|container> 查看image或container的底层信息
docker images 列出images
docker images -a 列出所有的images
docker ps 默认显示正在运行中的container
docker ps -l 显示最后一次创建的container，包括未运行的
docker ps -a 显示所有的container，包括未运行的
docker logs <container> 查看container的日志，也就是执行命令的一些输出
docker rm <container...> 删除一个或多个container
docker rm `docker ps -a -q` 删除所有的container
docker ps -a -q | xargs docker rm 同上, 删除所有的container
docker rmi <image...> 强制删除一个或多个image
docker start/stop/restart <container> 开启/停止/重启container
docker start -i <container> 启动一个container并进入交互模式
docker attach <container> attach一个运行中的container
docker run <image> <command> 使用image创建container并执行相应命令，然后停止
docker run -i -t <image> /bin/bash 使用image创建container并进入交互模式, login shell是/bin/bash
docker run -i -t -p <host_port:contain_port> 将container的端口映射到宿主机的端口
docker commit <container> [repo:tag] 将一个container固化为一个新的image，后面的repo:tag可选
docker build <path> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image
docker build -t repo[:tag] 同上，可以指定repo和可选的tag
docker build - < <dockerfile> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image
docker port <container> <container port> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到
